//
//  PostService.swift
//  SwiftDataExploration
//
//  Created by Andrew Althage on 9/29/23.
//

import Foundation

struct PostService {
    static func createPost(title: String, author: String) async throws -> Post {
        let url = URL(string: "http://localhost:3000/posts")!
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")

        let newPost = CreatePostDto(title: title, author: author) // Assuming id will be generated by the server
        let encoder = JSONEncoder()
        request.httpBody = try encoder.encode(newPost)

        let (data, response) = try await URLSession.shared.data(for: request)

        guard let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 201 else {
            throw URLError(.badServerResponse)
        }

        let createdPost = try JSONDecoder().decode(Post.self, from: data)
        return createdPost
    }

    static func getPosts() async throws -> [Post] {
        // simulate long loading
        try await Task.sleep(nanoseconds: 3_000_000_000)

        let url = URL(string: "http://localhost:3000/posts")!

        let session = URLSession.shared

        // Make the network request
        let (data, response) = try await session.data(from: url)

        // Check for HTTP errors
        guard let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 200 else {
            throw URLError(.badServerResponse)
        }

        // Decode the data into an array of Post
        let decoder = JSONDecoder()
        let posts = try decoder.decode([Post].self, from: data)

        return posts
    }

    struct CreatePostDto: Encodable {
        var title: String
        var author: String
    }
}
